using UnityEngine;
using UnityEditor;
using System.Collections;
using System.Collections.Generic;
using System.Xml;

public class AndroidAgentEditor : EditorWindow
{
	UnityGUI_AgentManifest	guiAgent;
	AgentDependency agents;
	Vector2	window_scroll = Vector2.zero;
	
	GUIStyle	PositiveButton = new GUIStyle("Button");
	GUIStyle	NegetiveButton = new GUIStyle("Button");
	GUIStyle	BoldLabel = new GUIStyle("Label");
	string		new_agent = "";
	int			editing_plugin = -1;
	Vector2		plugins_scorll = Vector2.zero;
	
	void initialize()
	{
		if (System.IO.File.Exists(AgentDependency.AgentsFile))
			agents = LoadAgentsFromFile(AgentDependency.AgentsFile);
		else
			agents = new AgentDependency();
		
		PositiveButton.fixedWidth = 30;
		PositiveButton.stretchWidth = false;
		NegetiveButton.fixedWidth = 30;
		NegetiveButton.stretchWidth = false;
		BoldLabel.normal.textColor = Color.white;
		BoldLabel.fontStyle = FontStyle.Bold;
		
		guiAgent = new UnityGUI_AgentManifest(null);
		guiAgent.SetButtonStyles(PositiveButton, NegetiveButton);
	}
	
	void OnGUI()
	{
		window_scroll = EditorGUILayout.BeginScrollView(window_scroll);
		EditorGUILayout.LabelField("Plugins", BoldLabel);
		EditorGUILayout.BeginHorizontal();
		new_agent = EditorGUILayout.TextField("Plugin Filename" , new_agent);
		if (GUILayout.Button("+", PositiveButton))
		{
			if (!new_agent.EndsWith(".cs")) new_agent += ".cs";
			agents.addAgent().filename = new_agent;
			new_agent = "";
			editing_plugin = -1;
		}
		EditorGUILayout.EndHorizontal();
		plugins_scorll = EditorGUILayout.BeginScrollView(plugins_scorll, GUILayout.Height(180));
		for (int i = 0; i < agents.Agents.Count; i++)
		{
			EditorGUILayout.BeginHorizontal("Box");
			if (GUILayout.Button("-", NegetiveButton))
			{
				agents.Agents.RemoveAt(i);
				i--;
				editing_plugin = -1;
				continue;
			}
			EditorGUILayout.LabelField(agents.Agents[i].filename + 
				" Permissions: " + agents.Agents[i].Permission.Count +
				" Activities: " + agents.Agents[i].Activity.Count +
				" Meta-Datas: " + agents.Agents[i].MetaData.Count
				);
			if (GUILayout.Button("...", PositiveButton))
			{
				editing_plugin = i;
			}
			EditorGUILayout.EndHorizontal();
		}
		EditorGUILayout.EndScrollView();
		EditorGUILayout.Space();
		if (editing_plugin >= 0)
		{
			EditorGUILayout.LabelField("Edit Plugin Dependencies", BoldLabel);
			AgentManifest am = agents.Agents[editing_plugin];
			guiAgent.Target = am;
			guiAgent.OnGUI();
		}
		EditorGUILayout.EndScrollView();
		EditorGUILayout.BeginHorizontal();
		EditorGUILayout.Space();
		if (GUILayout.Button("Export Dependencies.xml"))
		{
			SaveAgentsToFile(AgentDependency.AgentsFile, agents);
		}
		if (GUILayout.Button("Discard and reset"))
		{
			LoadAgentsFromFile(AgentDependency.AgentsFile);
		}
		if (GUILayout.Button("Close"))
		{
			this.Close();
		}
		EditorGUILayout.Space();
		EditorGUILayout.EndHorizontal();
		EditorGUILayout.Space();
	}
	
	#region Static helper functions
	public static AgentDependency		LoadAgentsFromFile(string path)
	{
		AgentDependency a = new AgentDependency();
		System.IO.StreamReader reader = new System.IO.StreamReader(path);
		string xmldata = reader.ReadToEnd();
		reader.Close();
		XmlDocument doc = new XmlDocument();
		doc.LoadXml(xmldata);
		XmlNode agent = doc.GetElementsByTagName(AgentDependency.Element.AgentDependency)[0];
		a.Read(agent);
		doc.Clone();
		return a;
	}
	public static void			SaveAgentsToFile(string path, AgentDependency m)
	{
		XmlTextWriter	writer = new XmlTextWriter(path, System.Text.Encoding.UTF8);
		writer.Indentation = 4;
		writer.Formatting = Formatting.Indented;
		writer.Settings.NewLineHandling = NewLineHandling.Entitize;
		writer.Settings.NewLineOnAttributes = true;
		writer.WriteStartDocument();
		writer.WriteComment("This file is generated by Agents Plugin Editor (created by Peyman Abdi peyman[at]nemo-games[dot]com).");
		m.Write(writer);
		writer.Close();
		AssetDatabase.Refresh(ImportAssetOptions.ForceUpdate);
	}
	#endregion
	
#if UNITY_ANDROID
	[MenuItem("Nemo/Android/Agent Plugin Editor")]
	public static AndroidAgentEditor		ShowAgentDependencyEditorWindow()
	{
		AndroidAgentEditor editor = EditorWindow.GetWindow(typeof(AndroidAgentEditor),
			true, "Android Manifest Editor") as AndroidAgentEditor;
		editor.initialize();
		editor.Show();
		return editor;
	}
#endif
}
