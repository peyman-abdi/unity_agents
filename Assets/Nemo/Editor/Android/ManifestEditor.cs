using UnityEditor;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;
using System.Xml;
using System.IO;
using System.Text.RegularExpressions;

public interface iXMLSerializable
{
	void		Write(XmlWriter writer);
	void		Read(XmlNode node);
}

public class Manifest : iXMLSerializable
{
	public static string		ManifestFolder { get{ return Application.dataPath + "/Plugins/Android/"; }}
	public static string		ManifestFile { get{ return Application.dataPath + "/Plugins/Android/AndroidManifest.xml"; }}
	public static string		LibsFolder { get { return Application.dataPath + "/Plugins/Android/libs/"; } }
	public static string		ResFolder { get { return Application.dataPath + "/Plugins/Android/res/"; } }
	
	public static string EditorVersion = "1.0";
	
	public static string[]	PermissionNames = new string[]
	{
		"android.permission.INTERNET",
		"android.permission.ACCESS_NETWORK_STATE",
		"android.permission.READ_PHONE_STATE",
		"android.permission.ACCESS_FINE_LOCATION",
		"com.android.vending.BILLING",
		"android.permission.WRITE_EXTERNAL_STORAGE",
		"android.permission.BLUETOOTH",
		"android.permission.RECEIVE_SMS",
		"android.permission.SHUTDOWN"
	};
	
	public static class Element
	{
		public static string	Permission = "uses-permission";
		public static string	Activity = "activity";
		public static string	Application = "application";
		public static string	UsesSDK = "uses-sdk";
		public static string	MetaData = "meta-data";
		public static string	IntentFilter = "intent-filter";
		public static string	Action = "action";
		public static string	Category = "category";
		public static string	Manifest = "manifest";
		public static string	SupportsScreens = "supports-screens";
		public static string	resources = "resources";
		public static string	string_element = "string";
	}
	public static class Value
	{
		public static string	AndroidNameSpace = "http://schemas.android.com/apk/res/android";
		public static string	ActionMain = "android.intent.action.MAIN";
		public static string	CategoryLuncher = "android.intent.category.LAUNCHER";
		public static string	ApplicationIcon = "@drawable/app_icon";
		public static string	ApplicationLabel = "@string/app_name";
	}
	public static class Attribute
	{
		public static string name = "android:name";
		public static string value = "android:value";
		public static string resource = "android:resource";
		public static string configChanges = "android:configChanges";
		public static string icon = "android:icon";
		public static string label = "android:label";
		public static string minSdkVersion = "android:minSdkVersion";
		public static string targetSdkVersion = "android:targetSdkVersion";
		public static string package = "package";
		public static string versionName = "android:versionName";
		public static string versionCode = "android:versionCode";
		public static string XMLNamespace = "xmlns:android";
		public static string smallScreens = "android:smallScreens";
		public static string normalScreens = "android:normalScreens";
		public static string largScreens = "android:largeScreens";
		public static string xlargScreens = "android:xlargeScreens";
		public static string anyDensity = "android:anyDensity";
		public static string debugable = "android:debuggable";
		public static string installLocation = "android:installLocation";
		public static string theme = "android:theme";
		public static string windowSoftInputMode = "android:windowSoftInputMode";
		public static string msgid = "msgid";
		public static string translatable = "translatable";		
	}
	public static bool		hasAttribute(XmlNode node, string attribute)
	{
		return (node.Attributes[attribute] != null);
	}
	public static bool		isElement(XmlNode node, string element)
	{
		return (node.Name == element);
	}
	
	public string		package = "";
	public string		versionCode = "";
	public string		versionName = "";	
	public ManifestApplication			application = new ManifestApplication();
	public List<ManifestPermission>		permission = new List<ManifestPermission>();
	
	public void		Write(XmlWriter writer)
	{
		writer.WriteComment("This file is generated by Manifest Editor version " + EditorVersion);
		writer.WriteComment("Manifest Editor is a c# class designed to improve Nemo Agents functionallity in Unity3D");
		writer.WriteComment("For more information contact: Peyman Abdi at peyman[at]nemo-games[dot]com");
		writer.WriteStartElement(Manifest.Element.Manifest);			// manifest
		writer.WriteAttributeString(Manifest.Attribute.package, package);
		writer.WriteAttributeString(Manifest.Attribute.XMLNamespace, Manifest.Value.AndroidNameSpace);
		writer.WriteAttributeString(Manifest.Attribute.versionCode, versionCode);
		writer.WriteAttributeString(Manifest.Attribute.versionName, versionName);
		writer.WriteAttributeString(Manifest.Attribute.installLocation, PlayerSettings.Android.preferredInstallLocation.ToString());
		{
			writer.WriteStartElement(Manifest.Element.SupportsScreens);		// supports-screens
			writer.WriteAttributeString(Manifest.Attribute.smallScreens, true.ToString());
			writer.WriteAttributeString(Manifest.Attribute.normalScreens, true.ToString());
			writer.WriteAttributeString(Manifest.Attribute.largScreens, true.ToString());
			writer.WriteAttributeString(Manifest.Attribute.xlargScreens, true.ToString());
			writer.WriteAttributeString(Manifest.Attribute.anyDensity, true.ToString());
			writer.WriteEndElement();		
			for (int i = 0; i < permission.Count; i++) permission[i].Write(writer);	// permissions
			application.Write(writer);	// application
		}
		writer.WriteEndElement();
	}
	
	public void		Read(XmlNode node)
	{
		if (isElement(node, Element.Manifest))
		{
			package = node.Attributes[Manifest.Attribute.package].Value;
			versionCode = node.Attributes[Manifest.Attribute.versionCode].Value;
			versionName = node.Attributes[Manifest.Attribute.versionName].Value;
			permission.Clear();
			foreach (XmlNode child in node.ChildNodes)
			{
				if (child.Name == Manifest.Element.Application) application.Read(child);
				else
				if (child.Name == Manifest.Element.Permission) addPermission().Read(child);
			}
		} else
			Debug.LogError("Node is not a manifest");
	}
	
	public bool						hasPermission(string permission_name)
	{
		foreach (ManifestPermission inperm in permission) if (permission_name == inperm.name) return true;
		return false;
	}
	public bool						hasActivity(string activity_name)
	{
		return application.hasActivity(activity_name);
	}
	public bool						hasMetaData(string metadata_name)
	{
		return application.hasMetaData(metadata_name);
	}
	public ManifestPermission		addPermission()
	{
		ManifestPermission perm = new ManifestPermission();
		permission.Add(perm);
		return perm;
	}
	public ManifestActivity			getActivity(string activity_name)
	{
		return application.getActivity(activity_name);
	}
	public ManifestMetaData			getActivityMetaData(string activity, string meta_name)
	{
		return application.getActivity(activity).getMetaData(meta_name);
	}
	public ManifestMetaData			getApplicationMetaData(string meta_name)
	{
		return application.getMetaData(meta_name);
	}
	
	public static string			ReadAttribute(XmlNode node, string attribute)
	{
		if (Manifest.hasAttribute(node, attribute))
			return node.Attributes[attribute].Value;
		else
			return "";
	}
	public static void				WriteAttribute(XmlWriter writer, string name, string value)
	{
		if (value != "" && value != " " && value != "VALUE GOES HERE") writer.WriteAttributeString(name, value);
	}
}
public class ManifestMetaData : iXMLSerializable
{
	public string		name;
	public string		value;
	public string		resource;
	
	public void		Set(string name, string value, string resource)
	{
		this.name = name;
		this.value = value;
		this.resource = resource;
	}
	
	public void		Write(XmlWriter writer)
	{
		writer.WriteStartElement(Manifest.Element.MetaData);
		Manifest.WriteAttribute(writer, Manifest.Attribute.name, name);
		Manifest.WriteAttribute(writer, Manifest.Attribute.value, value);
		Manifest.WriteAttribute(writer, Manifest.Attribute.resource, resource);
		writer.WriteEndElement();
	}
	
	public void		Read(XmlNode node)
	{
		if (Manifest.isElement(node, Manifest.Element.MetaData))
		{
			name = Manifest.ReadAttribute(node, Manifest.Attribute.name);
			value = Manifest.ReadAttribute(node, Manifest.Attribute.value);
			resource = Manifest.ReadAttribute(node, Manifest.Attribute.resource);
		} else
			Debug.LogError("Node is not a meta-data");
	}
}
public class ManifestApplication : iXMLSerializable
{
	public string			label = "";
	public string			icon = "";
	public List<ManifestMetaData>		meta_data = new List<ManifestMetaData>();
	public List<ManifestActivity>		activity = new List<ManifestActivity>();
	
	public void		Set(string label, string icon)
	{
		this.label = label;
		this.icon = icon;
	}
	
	public ManifestMetaData		addMetaData()
	{
		ManifestMetaData md = new ManifestMetaData();
		meta_data.Add(md);
		return md;
	}
	
	public ManifestActivity		addActivity()
	{
		ManifestActivity act = new ManifestActivity();
		activity.Add(act);
		return act;
	}
	public bool		hasActivity(string activity_name)
	{
		foreach (ManifestActivity inact in activity) if (activity_name == inact.name) return true;
		return false;
	}
	public bool		hasMetaData(string metadata_name)
	{
		foreach (ManifestMetaData indata in meta_data) if (indata.name == metadata_name) return true;
		return false;
	}
	public ManifestActivity		getActivity(string activity_name)
	{
		foreach (ManifestActivity inact in activity) if (activity_name == inact.name) return inact;
		return null;
	}
	public ManifestMetaData		getMetaData(string metadata_name)
	{
		foreach (ManifestMetaData data in meta_data) if (data.name == metadata_name) return data;
		return null;
	}
	
	public void		Write(XmlWriter writer)
	{
		writer.WriteStartElement(Manifest.Element.Application);
		{
			if (label.Trim() == "") label = Manifest.Value.ApplicationLabel;
			if (icon.Trim() == "") icon = Manifest.Value.ApplicationIcon;
			writer.WriteAttributeString(Manifest.Attribute.label, label);
			writer.WriteAttributeString(Manifest.Attribute.icon, icon);
			writer.WriteAttributeString(Manifest.Attribute.debugable, "true");
			for (int i = 0; i < activity.Count; i++) activity[i].Write(writer);
			for (int i = 0; i < meta_data.Count; i++) meta_data[i].Write(writer);
		}
		writer.WriteEndElement();
	}
	public void		Read(XmlNode node)
	{
		if (Manifest.isElement(node, Manifest.Element.Application))
		{
			label = node.Attributes[Manifest.Attribute.label].Value;
			icon = node.Attributes[Manifest.Attribute.icon].Value;
			meta_data.Clear();
			activity.Clear();
			foreach (XmlNode child in node.ChildNodes)
			{
				if (child.Name == Manifest.Element.Activity) addActivity().Read(child);
				else
				if (child.Name == Manifest.Element.MetaData) addMetaData().Read(child);
			}
		} else
			Debug.LogError("Node is not application");
	}
}
public class ManifestPermission : iXMLSerializable
{
	public string			name = "";
	
	public void		Write(XmlWriter writer)
	{
		writer.WriteStartElement(Manifest.Element.Permission);
		writer.WriteAttributeString(Manifest.Attribute.name, name);
		writer.WriteEndElement();
	}
	
	public void		Read(XmlNode node)
	{
		if (Manifest.isElement(node, Manifest.Element.Permission))
		{
			name = node.Attributes[Manifest.Attribute.name].Value;
		} else
			Debug.LogError("Node is not uses-permission");
	}
}
public class ManifestActivity : iXMLSerializable
{
	public string			name = "";
	public string			label = "";
	public string			configChanges = "";
	public string			theme = "";
	public string			windowSoftInputMode = "";
	public bool				Startup = false;
	
	public List<ManifestMetaData>		meta_data = new List<ManifestMetaData>();
	
	public void		Write(XmlWriter writer)
	{
		writer.WriteStartElement(Manifest.Element.Activity);
		writer.WriteAttributeString(Manifest.Attribute.name, name);
		writer.WriteAttributeString(Manifest.Attribute.label, label);
		writer.WriteAttributeString(Manifest.Attribute.configChanges, configChanges);
		if (theme != "") writer.WriteAttributeString(Manifest.Attribute.theme, theme);
		if (windowSoftInputMode != "") writer.WriteAttributeString(Manifest.Attribute.windowSoftInputMode, windowSoftInputMode);
		if (Startup)
		{
			writer.WriteStartElement(Manifest.Element.IntentFilter);
				writer.WriteStartElement(Manifest.Element.Action);
				writer.WriteAttributeString(Manifest.Attribute.name, Manifest.Value.ActionMain);
				writer.WriteEndElement();
				writer.WriteStartElement(Manifest.Element.Category);
				writer.WriteAttributeString(Manifest.Attribute.name, Manifest.Value.CategoryLuncher);
				writer.WriteEndElement();				
			writer.WriteEndElement();
		}
		for (int i = 0; i < meta_data.Count; i++) meta_data[i].Write(writer);
		writer.WriteEndElement();
	}
	
	public void		Read(XmlNode node)
	{
		if (Manifest.isElement(node, Manifest.Element.Activity))
		{
			name = label = configChanges = windowSoftInputMode = theme = "";
			name = node.Attributes[Manifest.Attribute.name].Value;
			label = Manifest.hasAttribute(node, Manifest.Attribute.label)?	node.Attributes[Manifest.Attribute.label].Value:"";
			configChanges = Manifest.hasAttribute(node, Manifest.Attribute.configChanges)?	node.Attributes[Manifest.Attribute.configChanges].Value:"";
			windowSoftInputMode = Manifest.hasAttribute(node, Manifest.Attribute.windowSoftInputMode)?
				node.Attributes[Manifest.Attribute.windowSoftInputMode].Value:"";
			theme = Manifest.hasAttribute(node, Manifest.Attribute.theme)?
				node.Attributes[Manifest.Attribute.theme].Value:"";
			foreach (XmlNode child in node.ChildNodes)
			{
				if (child.Name == Manifest.Element.IntentFilter) Startup = true;
				else
				if (child.Name == Manifest.Element.MetaData) addMetaData().Read(child);
			}
		} else
			Debug.LogError("Node is not activity");
	}
	
	public ManifestMetaData		addMetaData()
	{
		ManifestMetaData md = new ManifestMetaData();
		meta_data.Add(md);
		return md;
	}
	
	public ManifestMetaData		getMetaData(string metadata_name)
	{
		foreach (ManifestMetaData data in meta_data) if (data.name == metadata_name) return data;
		return null;
	}
	public bool			hasMetaData(string metadata_name)
	{
		foreach (ManifestMetaData data in meta_data) if (data.name == metadata_name) return true;
		return false;
	}
}
public class ManifestString : iXMLSerializable
{
	public string		name = "", value = "";
	public string		msgid = "";
	public bool		translatable = true;
	
	public void		Write(XmlWriter writer)
	{
		writer.WriteStartElement(Manifest.Element.string_element);
		writer.WriteAttributeString("name", name);
		if (!translatable) writer.WriteAttributeString(Manifest.Attribute.translatable, translatable.ToString());
		if (msgid != "") writer.WriteAttributeString(Manifest.Attribute.msgid, msgid);
		writer.WriteValue(value);
		writer.WriteEndElement();
	}
	
	public void		Read(XmlNode node)
	{
		if (Manifest.isElement(node, Manifest.Element.string_element))
		{
			//if (node.Attributes["name"] == null) return;
			name = node.Attributes["name"].Value;
			value = node.InnerText;
			if (Manifest.hasAttribute(node, Manifest.Attribute.translatable))
				translatable = bool.Parse(node.Attributes[Manifest.Attribute.translatable].Value);
			if (Manifest.hasAttribute(node, Manifest.Attribute.msgid))
				msgid = node.Attributes[Manifest.Attribute.msgid].Value;
		} else Debug.LogError("Node is not string: " + node.Name + " :: " + node.InnerXml);
	}
}

public class ManifestResource : iXMLSerializable
{
	public static string		StringsFilename { get { return Application.dataPath + "/Plugins/Android/res/values/strings.xml"; } }
	public static string		StringsFolder { get { return Application.dataPath + "/Plugins/Android/res/values/"; } }
	
	public List<ManifestString>		strings = new List<ManifestString>();
	
	public void		Write(XmlWriter writer)
	{
		writer.WriteStartElement(Manifest.Element.resources);
		for (int i = 0; i < strings.Count; i++) strings[i].Write(writer);
		writer.WriteEndElement();
	}

	public void		Read(XmlNode node)
	{
		strings.Clear();
		if (Manifest.isElement(node, Manifest.Element.resources))
		{
			foreach (XmlNode child in node.ChildNodes)
			{
				if (child.Name == Manifest.Element.string_element) addString("", "", "", true).Read(child);
			}
		} else Debug.LogError("Node is not resource");
	}
	
	public void	Clear() { strings.Clear(); }
	public int		Count { get { return strings.Count; } }
	public ManifestString		addString(string name, string val, string msgid, bool translatable)
	{
		ManifestString ms = new ManifestString();
		ms.name = name;
		ms.value = val;
		ms.msgid = msgid;
		ms.translatable = translatable;
		strings.Add(ms);
		return ms;
	}
	public ManifestString		addString(string name, ManifestString copy)
	{
		ManifestString ms = new ManifestString();
		ms.name = name;
		ms.value = copy.value;
		ms.msgid = copy.msgid;
		ms.translatable = copy.translatable;
		strings.Add(ms);
		return ms;
	}
	public bool		hasName(string name)
	{
		for (int i = 0; i < strings.Count; i++) if (strings[i].name == name) return true;
		return false;
	}
	public static bool		isResourceString(string value)
	{
		return value.StartsWith("@string/");
	}
	public void		addFromMetaData(ManifestMetaData mmd, string value)
	{
		if (!hasName(mmd.value.Substring(8))) addString(mmd.value.Substring(8), value, "", true);
	}
	public void		addAllFromMetaDataList(List<ManifestMetaData> list, string default_value)
	{
		foreach (ManifestMetaData mmd in list)
			if (isResourceString(mmd.value)) addFromMetaData(mmd, default_value);
	}
	public void		addAllFromActivityList(List<ManifestActivity> list, string default_value)
	{
		foreach (ManifestActivity act in list)
			foreach (ManifestMetaData mmd in act.meta_data)
				if (isResourceString(mmd.value)) addFromMetaData(mmd, "NOT SET");
	}
	public string	getValue(string name)
	{
		for (int i = 0; i < strings.Count; i++) if (strings[i].name == name) return strings[i].value;
		return "";
	}
	public void		setValue(string name, string value, string msgid, bool translatable)
	{
		for (int i = 0; i < strings.Count; i++) if (strings[i].name == name)
		{
			strings[i].value = value; 
			strings[i].msgid = msgid;
			strings[i].translatable = translatable;
			break; 
		}
	}
	public void		setValue(string name, ManifestString copy)
	{
		for (int i = 0; i < strings.Count; i++) if (strings[i].name == name)
		{
			strings[i].value = copy.value;
			strings[i].msgid = copy.msgid;
			strings[i].translatable = copy.translatable;
			break; 
		}
	}
	public void		removeEntry(string name)
	{
		for (int i = 0; i < strings.Count; i++) if (strings[i].name == name)
		{
			strings.RemoveAt(i);
			break;
		}
	}
}

public class AgentDependency : iXMLSerializable
{
	public static string		AgentsFile { get { return Application.dataPath + "/../Nemo/Android/AgentDependencies.xml"; }}
	public static string		AgentLibsFolder(string name)
	{
		return Application.dataPath + "/../Nemo/Android/" + name + "/libs/";
	}
	
	public static class Element
	{
		public static string	Agent = "agent";
		public static string	AgentVersion = "agent-version";
		public static string	AgentSet = "agent-set";
		public static string	AgentDependency = "nemo-agents";
		public static string	Library = "uses-library";
		public static string	Definition = "define";
		public static string	PreDefSet = "predef-set";
		public static string	RequiresAgent = "requires-agents";
	}
	public static class Attribute
	{
		public static string	name = "name";
		public static string	version = "version";
		public static string	filename = "filename";
		public static string	status = "status";
	}
	
	public string					VersionName = "0.2";
	public List<AgentManifest>		Agents = new List<AgentManifest>();
	
	public void		Write(XmlWriter writer)
	{
		writer.WriteStartElement(Element.AgentDependency);
		writer.WriteAttributeString(Manifest.Attribute.XMLNamespace, Manifest.Value.AndroidNameSpace);
		writer.WriteAttributeString(Attribute.version, VersionName);
		for (int i = 0; i < Agents.Count; i++) Agents[i].Write(writer);
		writer.WriteEndElement();
	}
	public void		Read(XmlNode node)
	{
		if (node.Name == Element.AgentDependency)
		{
			VersionName = node.Attributes[Attribute.version].Value;
			foreach (XmlNode child in node) addAgent().Read(child);
		} else Debug.LogError("Node is not Nemo Agent");
	}
	
	public bool				hasAgent(string filename)
	{
		return (getAgentWithFilename(filename) != null);
	}
	
	public AgentManifest	addAgent()
	{
		AgentManifest am = new AgentManifest();
		Agents.Add(am);
		return am;
	}
	
	public AgentManifest	getAgentWithFilename(string filename)
	{
		foreach (AgentManifest am in Agents) if (am.filename == filename) return am;
		return null;
	}
}
public class AgentManifest : iXMLSerializable
{
	public string		LibraryFolder { get { return Application.dataPath + "/../Nemo/Android/"+filename+"/libs/"; } }
	public string		ResFolder { get { return Application.dataPath + "/../Nemo/Android/"+filename+"/res/"; } }
	public string		SourceFolder { get { return Application.dataPath + "/../Nemo/Android/"+filename+"/"; } }
	public string		filename;
	
	public List<ManifestPermission>		Permission = new List<ManifestPermission>();
	public List<ManifestMetaData>		MetaData = new List<ManifestMetaData>();
	public List<ManifestActivity>		Activity = new List<ManifestActivity>();
	public ManifestResource				Strings = new ManifestResource();
	public List<string>				RequiredAgents = new List<string>();
	
	public void Write(XmlWriter writer)
	{
		Strings.addAllFromActivityList(Activity, "NOT SET");
		Strings.addAllFromMetaDataList(MetaData, "NOT SET");
		ClearTrashedStrings();
		
		writer.WriteStartElement(AgentDependency.Element.Agent);
		writer.WriteAttributeString(AgentDependency.Attribute.filename, filename);
		for (int i = 0; i < Permission.Count; i++) Permission[i].Write(writer);
		for (int i = 0; i < MetaData.Count; i++) MetaData[i].Write(writer);
		for (int i = 0; i < Activity.Count; i++) Activity[i].Write(writer);
		writer.WriteStartElement(AgentDependency.Element.RequiresAgent);
		for (int i = 0; i < RequiredAgents.Count; i++)
		{
			writer.WriteElementString(AgentDependency.Element.Agent, RequiredAgents[i]);
		}
		writer.WriteEndElement();
		Strings.Write(writer);
		writer.WriteEndElement();
	}
	
	public void Read(XmlNode node)
	{
		if (node.Name == AgentDependency.Element.Agent)
		{
			Permission.Clear();
			Activity.Clear();
			MetaData.Clear();
			Strings.Clear();
			RequiredAgents.Clear();
			filename = node.Attributes[AgentDependency.Attribute.filename].Value;
			foreach (XmlNode child in node)
			{
				if (child.Name == Manifest.Element.Permission) addPermission().Read(child);
				else
				if (child.Name == Manifest.Element.Activity) addActivity().Read(child);
				else
				if (child.Name == Manifest.Element.MetaData) addMetaData().Read(child);
				else
				if (child.Name == Manifest.Element.resources) Strings.Read(child);
				else
				if (child.Name == AgentDependency.Element.RequiresAgent) CollectDependencyAgents(child);
			}
			Strings.addAllFromActivityList(Activity, "NOT SET");
			Strings.addAllFromMetaDataList(MetaData, "NOT SET");
		} else Debug.LogError("Node is not Agent");
	}
	
	public void						ClearTrashedStrings()
	{
		for (int i = 0; i < Strings.Count; i++)
		{
			if (!doesMetaDataWithStringNameExist(Strings.strings[i].name))
			{
				Strings.strings.RemoveAt(i);
				i--;
			}
		}
	}
	
	public bool						doesMetaDataWithStringNameExist(string string_name)
	{
		foreach (ManifestMetaData mmd in MetaData)
			if (mmd.value.EndsWith(string_name)) return true;
		foreach (ManifestActivity act in Activity)
			foreach (ManifestMetaData mmd in act.meta_data)
				if (mmd.value.EndsWith(string_name)) return true;
		return false;
	}
	
	public ManifestPermission		addPermission()
	{
		ManifestPermission pem = new ManifestPermission();
		Permission.Add(pem);
		return pem;
	}
	public ManifestActivity			addActivity()
	{
		ManifestActivity act = new ManifestActivity();
		Activity.Add(act);
		return act;
	}
	public ManifestMetaData			addMetaData()
	{
		ManifestMetaData mmd = new ManifestMetaData();
		MetaData.Add(mmd);
		return mmd;
	}
	public bool		hasResources()
	{
		return System.IO.Directory.Exists(ResFolder);
	}
	public void		CollectDependencyAgents(XmlNode node)
	{
		foreach (XmlNode child in node.ChildNodes)
		{
			if (child.Name == AgentDependency.Element.Agent) RequiredAgents.Add(child.InnerText);
		}
	}
}
public class AgentSetVersion : iXMLSerializable
{
	public string	name = "",
					versionName = "",
					versionCode = "",
					bundleid = "";
	
	public List<AgentVersion>	Plugins = new List<AgentVersion>();
	public List<string>			PreDefine = new List<string>();
	
	public void Write(XmlWriter writer)
	{
		writer.WriteStartElement(AgentDependency.Element.AgentSet);
		writer.WriteAttributeString(AgentDependency.Attribute.name, name);
		writer.WriteAttributeString(Manifest.Attribute.versionCode, versionCode);
		writer.WriteAttributeString(Manifest.Attribute.versionName, versionName);
		writer.WriteAttributeString(Manifest.Attribute.package, bundleid);
		writer.WriteAttributeString(Manifest.Attribute.XMLNamespace, Manifest.Value.AndroidNameSpace);
		for (int i = 0; i < PreDefine.Count; i++)
			writer.WriteElementString(AgentDependency.Element.Definition, PreDefine[i]);
		for (int i = 0; i < Plugins.Count; i++) Plugins[i].Write(writer);
		writer.WriteEndElement();
	}
	public void Read(XmlNode node)
	{
		if (node.Name == AgentDependency.Element.AgentSet)
		{
			name = node.Attributes[AgentDependency.Attribute.name].Value;
			versionName = node.Attributes[Manifest.Attribute.versionName].Value;
			versionCode = node.Attributes[Manifest.Attribute.versionCode].Value;
			bundleid = node.Attributes[Manifest.Attribute.package].Value;
			foreach (XmlNode child in node.ChildNodes)
			{
				if (child.Name == AgentDependency.Element.AgentVersion) addPlugin().Read(child);
				else
				if (child.Name == AgentDependency.Element.Definition) PreDefine.Add(child.InnerText);
			}
		} else Debug.LogError("Node is not Agent Set");
	}
	
	public AgentVersion		addPlugin()
	{
		AgentVersion v = new AgentVersion();
		Plugins.Add(v);
		return v;
	}
	
	public bool		hasPlugin(string filename)
	{
		foreach (AgentVersion v in Plugins) if (v.filename == filename) return true;
		return false;
	}
	public bool		isPluginActive(string filename)
	{
		foreach (AgentVersion v in Plugins) if (v.filename == filename) return v.status;
		return false;
	}
	public AgentVersion	getVersionOfPlugin(string filename)
	{
		foreach (AgentVersion v in Plugins) if (v.filename == filename) return v;
		return null;
	}
	public bool		isVersionReady()
	{
		if (name == "" || versionCode == "" || versionName == "") return false;
		for (int i = 0; i < Plugins.Count; i++) if (!Plugins[i].isVersionReady(this)) return false;
		return true;
	}
	public bool		isManifestReady(Manifest manifest)
	{
		if (manifest.package != bundleid || manifest.versionCode != versionCode || manifest.versionName != versionName)
			return false;
		for (int i = 0; i < Plugins.Count; i++)
		{
			if (!Plugins[i].isManifestReady(manifest)) return false;
		}
		return true;
	}
	public bool		isStringsReady(ManifestResource strings)
	{
		for (int i = 0; i < Plugins.Count; i++) if (Plugins[i].status && !Plugins[i].isStringsReady(strings)) return false;
		return true;
	}
	public bool		isLibraryReady()
	{
		for (int i = 0; i < Plugins.Count; i++) if (!Plugins[i].isLibraryReady()) return false;
		return true;
	}
}
public class AgentVersion : iXMLSerializable
{
	public static string	VersionsPath { get { return Application.dataPath + "/../Nemo/Android/Versions/"; } }
	public static string	SoftValueString { get { return "VERSION CODE HERE"; } }
	
	public string	filename = "";
	public bool		status = false;
	public List<ManifestMetaData>	MetaData = new List<ManifestMetaData>();
	public ManifestResource			Strings = new ManifestResource();
	public AgentManifest	ManifestSource;
	
	public void Write(XmlWriter writer)
	{
		writer.WriteStartElement(AgentDependency.Element.AgentVersion);
		writer.WriteAttributeString(AgentDependency.Attribute.filename, filename);
		writer.WriteAttributeString(AgentDependency.Attribute.status, status.ToString());
		for (int i = 0; i < MetaData.Count; i++) MetaData[i].Write(writer);
		Strings.Write(writer);
		writer.WriteEndElement();
	}
	public void Read(XmlNode node)
	{
		if (node.Name == AgentDependency.Element.AgentVersion)
		{
			filename = node.Attributes[AgentDependency.Attribute.filename].Value;
			status = bool.Parse(node.Attributes[AgentDependency.Attribute.status].Value);
			foreach (XmlNode child in node.ChildNodes)
			{
				if (child.Name == Manifest.Element.MetaData) addMetaData().Read(child);
				else
				if (child.Name == Manifest.Element.resources) Strings.Read(child);
			}
		} else Debug.LogError("Node is not Agent Version");
	}
	
	public ManifestMetaData			addMetaData()
	{
		ManifestMetaData mmd = new ManifestMetaData();
		MetaData.Add(mmd);
		return mmd;
	}
	
	public void		ImportFromManifest(AgentManifest am, bool status)
	{
		filename = am.filename;
		this.status = status;
		MetaData.Clear();
		Strings.Clear();
		importMetaDataFrom(am.MetaData, false);
		foreach (ManifestActivity act in am.Activity)
			importMetaDataFrom(act.meta_data, true);
		ManifestSource = am;
	}
	
	private void	importMetaDataFrom(List<ManifestMetaData> list, bool onlyStrings)
	{
		for (int i = 0; i < list.Count; i++)
		{
			ManifestMetaData version_data = new ManifestMetaData();
			version_data.name = list[i].name;
			if (ManifestResource.isResourceString(list[i].value))
			{
				Strings.addFromMetaData(list[i], "NOT SET");
			} else
			{
				if (!onlyStrings)
				{
					if (list[i].value == SoftValueString)
					{
						version_data.value = "NOT SET";
						version_data.resource = "NOT SET";
					} else
					{
						version_data.value = list[i].value;
						version_data.resource = list[i].resource;
					}
					MetaData.Add(version_data);
				}
			}
		}
	}
	
	public bool		isManifestReady(Manifest manifest)
	{
		if (!status) return true;
		for (int i = 0; i < ManifestSource.Activity.Count; i++)
		{
			if (!manifest.hasActivity(ManifestSource.Activity[i].name)) return false;
			else
			{
				List<ManifestMetaData> metas = ManifestSource.Activity[i].meta_data;
				for (int j = 0; j < metas.Count; j++)
				{
					if (metas[j].value == "NOT SET") return false;
					if (!manifest.getActivity(ManifestSource.Activity[i].name).hasMetaData(metas[j].name)) return false;
					if (manifest.getActivityMetaData(ManifestSource.Activity[i].name, metas[j].name).value
						!= metas[j].value) return false;
				}
			}
		}
		for (int i = 0; i < ManifestSource.Permission.Count; i++)
			if (!manifest.hasPermission(ManifestSource.Permission[i].name)) return false;
		for (int i = 0; i < MetaData.Count; i++) if (MetaData[i].value == "NOT SET") return false;
		for (int i = 0; i < MetaData.Count; i++)
		{
			if (!manifest.hasMetaData(MetaData[i].name)) return false;
			else if (manifest.getApplicationMetaData(MetaData[i].name).value != MetaData[i].value) return false;
		}
		return true;
	}
	public bool		isStringsReady(ManifestResource strings)
	{
		for (int i = 0; i < Strings.Count; i++)
		{
			if (!strings.hasName(Strings.strings[i].name)) return false;
			else
			{
				if (strings.getValue(Strings.strings[i].name) != Strings.strings[i].value) return false;
			}
		}
		return true;
	}
	
	public bool		isLibraryReady()
	{
		return true;
	}
	public bool		isVersionReady(AgentSetVersion s)
	{
		if (status)
		{
			for (int i = 0; i < MetaData.Count; i++) if (MetaData[i].value == "NOT SET") return false;
			for (int i = 0; i < Strings.Count; i++) if (Strings.strings[i].value == "NOT SET") return false;
			for (int i = 0; i < ManifestSource.RequiredAgents.Count; i++)
				if (!s.isPluginActive(ManifestSource.RequiredAgents[i])) return false;
		}
		return true;
	}
}

public class ResFolder
{
	string 		name;
	string[]		files;
	ResFolder[]	folders;
	ResFolder	parent;
	
	Regex mergable = new Regex(@".*values.*/.*strings.*\.xml$");
	
	public ResFolder(string path)
	{
		parent = null;
		name = path;
		
		string[] filespath = Directory.GetFiles(path);
		files = new string[filespath.Length];
		for (int i = 0; i < files.Length; i++) files[i] = filespath[i].Substring(path.Length);
		string[] dirs = Directory.GetDirectories(path);
		folders = new ResFolder[dirs.Length];
		for (int i = 0; i < folders.Length; i++) folders[i] = new ResFolder(this, dirs[i].Substring(path.Length));
	}
	
	public ResFolder(ResFolder parent, string name)
	{
		this.parent = parent;
		this.name = name;
		string path = FilePath;
		string[] filespath = Directory.GetFiles(path);
		files = new string[filespath.Length];
		for (int i = 0; i < files.Length; i++) files[i] = filespath[i].Substring(path.Length);
		string[] dirs = Directory.GetDirectories(path);
		folders = new ResFolder[dirs.Length];
		for (int i = 0; i < folders.Length; i++) folders[i] = new ResFolder(this, dirs[i].Substring(path.Length));
	}
	
	public string		FilePath
	{
		get
		{
			if (parent == null) return (name.EndsWith("/")? name:name + "/");
			else
				return parent.FilePath + name + "/";
		}
	}
	
	public void		PrintHierarchy()
	{
		Debug.Log(FilePath);
		foreach (ResFolder res in folders) res.PrintHierarchy();
	}
	
	public void		CopyHierarchyTo(string dest)
	{
		string path = FilePath;
		string mydest = dest + (parent!=null? name+"/":"");
		if (!Directory.Exists(mydest)) Directory.CreateDirectory(mydest);
		if (!dest.EndsWith("/")) dest += "/";
		foreach (string filename in files)
		{
			if (isMergable(mydest + filename) && File.Exists(mydest + filename))
				MergeXMLs(path + filename, mydest + filename);
			else
				File.Copy(path + filename, mydest + filename, true);
		}
		foreach (ResFolder rf in folders)
			rf.CopyHierarchyTo(mydest + "/");
	}
	
	public void		ClearHierarchyFrom(string path)
	{
		string[] filenames = Directory.GetFiles(path, "*", SearchOption.AllDirectories);
		foreach (string file in filenames)
		{
			if (isFileInHierarchy(file.Substring(path.Length)))
			{
				string source_file = getFileInHierarchy(file.Substring(path.Length));
				System.IO.File.SetAttributes(file, System.IO.FileAttributes.Normal);
				if (isMergable(file))
				{
					ClearXMLs(source_file ,file);
				} else
				{
					File.Delete(file);
					if (File.Exists(file + ".meta")) File.Delete(file + ".meta");
				}
			}
		}
	}
	
	public bool		isFileInHierarchy(string filename)
	{
		if (filename.IndexOf('/') > 0)
		{
			string root = filename.Substring(0, filename.IndexOf('/'));
			ResFolder foldername = null;
			foreach (ResFolder rf in folders)
				if (rf.name == root) { foldername = rf; break; }
			if (foldername != null) return foldername.isFileInHierarchy(filename.Substring(root.Length+1));
			return false;
		} else
		{
			foreach (string ff in files)
				if (ff == filename)
					return true;
			return false;
		}
	}
	
	public string	getFileInHierarchy(string filename)
	{
		if (filename.IndexOf('/') > 0)
		{
			string root = filename.Substring(0, filename.IndexOf('/'));
			ResFolder foldername = null;
			foreach (ResFolder rf in folders)
				if (rf.name == root) { foldername = rf; break; }
			if (foldername != null) return foldername.getFileInHierarchy(filename.Substring(root.Length+1));
			return "|";
		} else
		{
			foreach (string ff in files)
				if (ff == filename)
					return FilePath + ff;
			return ".";
		}
	}
	
	public bool		isMergable(string filename)
	{
		return mergable.IsMatch(filename);
	}
	
	public void		MergeXMLs(string source, string dest)
	{
		System.IO.StreamReader reader = new System.IO.StreamReader(source);
		string xmldata = reader.ReadToEnd();
		reader.Close();
		XmlDocument doc_source = new XmlDocument();
		doc_source.LoadXml(xmldata);
		
		reader = new System.IO.StreamReader(dest);
		xmldata = reader.ReadToEnd();
		reader.Close();
		XmlDocument doc_dest = new XmlDocument();
		doc_dest.LoadXml(xmldata);
		
		foreach (XmlNode childs in doc_source.DocumentElement.ChildNodes)
		{
			XmlNode imported = doc_dest.ImportNode(childs, true);
			if (getNodeAsChild(imported, doc_dest.DocumentElement) == null)
				doc_dest.DocumentElement.AppendChild(imported);
		}
		
		XmlTextWriter	writer = new XmlTextWriter(dest, System.Text.Encoding.UTF8);
		writer.Indentation = 4;
		writer.Formatting = Formatting.Indented;
		writer.Settings.NewLineHandling = NewLineHandling.Entitize;
		writer.Settings.NewLineOnAttributes = true;
		doc_dest.WriteTo(writer);
		writer.Close();
	}
	
	public static XmlNode	getNodeAsChild(XmlNode node, XmlNode search)
	{
		foreach (XmlNode child in search)
		{
			if (isDeepEqual(child, node)) return child;
		}
		return null;
	}
	
	public static bool 	isDeepEqual(XmlNode n1, XmlNode n2)
	{
		if (n1.Name != n2.Name) return false;
		if (n1.Attributes != null && n2.Attributes != null)
		{
			if (n1.Attributes.Count != n2.Attributes.Count) return false;
			foreach (XmlAttribute att in n1.Attributes)
			{
				if (n2.Attributes[att.Name] == null || n2.Attributes[att.Name].Value != att.Value) return false;
			}
		} else if (n1.Attributes != n2.Attributes) return false;
		if (n1.HasChildNodes && n2.HasChildNodes)
		{
			foreach (XmlNode child in n1.ChildNodes)
			{
				if (getNodeAsChild(child, n2) == null) return false;
			}
		} else if (n1.HasChildNodes != n2.HasChildNodes) return false;
		return true;
	}
	
	public void		ClearXMLs(string source, string dest)
	{
		System.IO.StreamReader reader = new System.IO.StreamReader(source);
		string xmldata = reader.ReadToEnd();
		reader.Close();
		XmlDocument doc_source = new XmlDocument();
		doc_source.LoadXml(xmldata);
		
		reader = new System.IO.StreamReader(dest);
		xmldata = reader.ReadToEnd();
		reader.Close();
		XmlDocument doc_dest = new XmlDocument();
		doc_dest.LoadXml(xmldata);
		
		foreach (XmlNode child in doc_source.DocumentElement.ChildNodes)
		{
			XmlNode to_clear = getNodeAsChild(child, doc_dest.DocumentElement);
			if (to_clear != null)
				doc_dest.DocumentElement.RemoveChild(to_clear);
		}
		
		XmlTextWriter	writer = new XmlTextWriter(dest, System.Text.Encoding.UTF8);
		writer.Indentation = 4;
		writer.Formatting = Formatting.Indented;
		writer.Settings.NewLineHandling = NewLineHandling.Entitize;
		writer.Settings.NewLineOnAttributes = true;
		doc_dest.WriteTo(writer);
		writer.Close();
	}
}


public class UnityGUI_Permission
{
	public List<ManifestPermission>		permission;
	public int							ListHeight = 180;
	public GUIStyle						PositiveButton = new GUIStyle("Button");
	public GUIStyle						NegetiveButton = new GUIStyle("Button");
	int		selected_permission_index = -1;
	Vector2	scroll_permissions = Vector2.zero;
	public void	SetButtonStyles(GUIStyle pos, GUIStyle neg) { PositiveButton = pos; NegetiveButton = neg; }
	public UnityGUI_Permission(List<ManifestPermission> list)
	{
		permission = list;
	}
	public void		OnGUI()
	{
		EditorGUILayout.BeginVertical();
		EditorGUILayout.BeginHorizontal();
		selected_permission_index = EditorGUILayout.Popup(selected_permission_index, Manifest.PermissionNames);
		if (GUILayout.Button("+", PositiveButton))
		{
			if (selected_permission_index >= 0)
			{
				ManifestPermission perm = new ManifestPermission();
				perm.name = Manifest.PermissionNames[selected_permission_index];
				permission.Add(perm);
				selected_permission_index = -1;
			}
		}
		EditorGUILayout.EndHorizontal();
		scroll_permissions = EditorGUILayout.BeginScrollView(scroll_permissions, GUILayout.Height(ListHeight));
		for (int i = 0; i < permission.Count; i++)
		{
			EditorGUILayout.BeginHorizontal("Box");
			if (GUILayout.Button("-", NegetiveButton))
			{
				selected_permission_index = -1;
				permission.RemoveAt(i);
				i--;
				continue;
			}
			EditorGUILayout.LabelField(permission[i].name);
			EditorGUILayout.EndHorizontal();
		}
		EditorGUILayout.EndScrollView();
		EditorGUILayout.EndVertical();
	}
	
};
public class UnityGUI_MetaData
{
	public List<ManifestMetaData>	meta_data;
	public GUIStyle						PositiveButton = new GUIStyle("Button");
	public GUIStyle						NegetiveButton = new GUIStyle("Button");
	string 	meta_name = "",
			meta_value = "",
			meta_resource = "";
	public void	SetButtonStyles(GUIStyle pos, GUIStyle neg) { PositiveButton = pos; NegetiveButton = neg; }
	public UnityGUI_MetaData(List<ManifestMetaData> list)
	{
		meta_data = list;
	}
	public void OnGUI()
	{
		EditorGUILayout.BeginVertical();
		EditorGUILayout.BeginHorizontal();
		meta_name = EditorGUILayout.TextField(meta_name);
		meta_value = EditorGUILayout.TextField(meta_value);
		meta_resource = EditorGUILayout.TextField(meta_resource);
		if (GUILayout.Button("+", PositiveButton))
		{
			if (meta_name != "" && meta_name != " ")
			{
				ManifestMetaData data = new ManifestMetaData();
				data.Set(meta_name, meta_value, meta_resource);
				meta_data.Add(data);
				meta_name = meta_value = meta_resource = "";
			} else
				Debug.LogWarning("Meta data must have a valid name");
		}
		EditorGUILayout.EndHorizontal();
		for (int i = 0; i < meta_data.Count; i++)
		{
			EditorGUILayout.BeginHorizontal();
			if (GUILayout.Button("-", NegetiveButton))
			{
				meta_data.RemoveAt(i);
				i--;
				continue;
			}
			meta_data[i].name = EditorGUILayout.TextField(meta_data[i].name);
			meta_data[i].value = EditorGUILayout.TextField(meta_data[i].value);
			meta_data[i].resource = EditorGUILayout.TextField(meta_data[i].resource);
			EditorGUILayout.EndHorizontal();
		}
		EditorGUILayout.EndVertical();
	}
}
public class UnityGUI_Activity
{
	public List<ManifestActivity>	activity;
	GUIStyle					PositiveButton = new GUIStyle("Button");
	GUIStyle					NegetiveButton = new GUIStyle("Button");
	UnityGUI_MetaData	guiMetaData;
	public int						ListHeight = 180;
	int edit_index = -1;
	Vector2 scroll = Vector2.zero;
	public void	SetButtonStyles(GUIStyle pos, GUIStyle neg) { PositiveButton = pos; NegetiveButton = neg; }
	public UnityGUI_Activity(List<ManifestActivity> list)
	{
		activity = list;
		guiMetaData = new UnityGUI_MetaData(null);
	}
	public void OnGUI()
	{
		EditorGUILayout.BeginVertical();
		EditorGUILayout.BeginHorizontal();
		if (GUILayout.Button("+", PositiveButton))
		{
			ManifestActivity act = new ManifestActivity();
			activity.Add(act);
		}
		scroll = EditorGUILayout.BeginScrollView(scroll, GUILayout.Height(ListHeight));
		for (int i = 0; i < activity.Count; i++)
		{
			EditorGUILayout.BeginHorizontal("Box");
			if (GUILayout.Button("-", NegetiveButton))
			{
				activity.RemoveAt(i);
				i--;
				edit_index = -1;
				continue;
			}
			EditorGUILayout.LabelField(activity[i].name);
			if (GUILayout.Button("...", PositiveButton))
			{
				edit_index = i;
			}
			EditorGUILayout.EndHorizontal();
		}
		EditorGUILayout.EndScrollView();
		EditorGUILayout.EndHorizontal();
		if (edit_index >= 0 && edit_index < activity.Count)
		{
			EditorGUILayout.LabelField("Editing " + activity[edit_index].name);
			OnGUI(activity[edit_index]);
		}
		EditorGUILayout.EndVertical();
	}
	
	public void	OnGUI(ManifestActivity act)
	{
		act.name = EditorGUILayout.TextField("Name", act.name);
		act.label = EditorGUILayout.TextField("Label", act.label);
		act.configChanges = EditorGUILayout.TextField("Config Changes", act.configChanges);
		act.theme = EditorGUILayout.TextField("Theme", act.theme);
		act.windowSoftInputMode = EditorGUILayout.TextField("Soft Input Mode", act.windowSoftInputMode);
		act.Startup = EditorGUILayout.Toggle("Startup Activity", act.Startup);
		guiMetaData.meta_data = act.meta_data;
		EditorGUILayout.LabelField("Activity Meta-Data (name, value, resource)");
		guiMetaData.OnGUI();
	}
}
public class UnityGUI_Application
{
	public ManifestApplication		app;
	public UnityGUI_Application(ManifestApplication a)
	{
		app = a;
	}
	public void OnGUI()
	{
		EditorGUILayout.BeginVertical();
		app.icon = EditorGUILayout.TextField("Icon", app.icon);
		app.label = EditorGUILayout.TextField("Label", app.label);
		EditorGUILayout.EndVertical();
	}	
}
public class UnityGUI_Manifest
{
	public Manifest					manifest;
	public UnityGUI_Manifest(Manifest m)
	{
		manifest = m;
	}
	public void OnGUI()
	{
		EditorGUILayout.BeginVertical();
		manifest.package = EditorGUILayout.TextField("Package", manifest.package);
		manifest.versionName = EditorGUILayout.TextField("Version Name", manifest.versionName);
		manifest.versionCode = EditorGUILayout.TextField("Version Code", manifest.versionCode);
		EditorGUILayout.EndVertical();
	}
}
public class UnityGUI_AgentManifest
{
	public AgentManifest	Target;
	public GUIStyle	BoldLabel = new GUIStyle("Label");
	
	GUIStyle	PositiveButton = new GUIStyle("Button");
	GUIStyle	NegetiveButton = new GUIStyle("Button");
	string 		new_metaname = "", new_depname = "";
	UnityGUI_Permission	 guiPermission;
	UnityGUI_Activity	 guiActivity;

	public UnityGUI_AgentManifest(AgentManifest agent)
	{
		Target = agent;
		guiActivity = new UnityGUI_Activity(null);
		guiPermission = new UnityGUI_Permission(null);
	}
	
	public void		SetButtonStyles(GUIStyle pos, GUIStyle neg)
	{
		PositiveButton = pos;
		NegetiveButton = neg;
		guiActivity.SetButtonStyles(PositiveButton, NegetiveButton);
		guiPermission.SetButtonStyles(PositiveButton, NegetiveButton);
	}
	
	public void OnGUI()
	{
		EditorGUILayout.BeginVertical();
		Target.filename = EditorGUILayout.TextField("Plugin Filename", Target.filename);
		EditorGUILayout.Space();
		EditorGUILayout.LabelField("Required Meta-Data", BoldLabel);
		OnGUI_MetaData();
		EditorGUILayout.Space();
		EditorGUILayout.LabelField("Plugin Required Permissions", BoldLabel);
		guiPermission.permission = Target.Permission;
		guiPermission.OnGUI();
		EditorGUILayout.Space();
		EditorGUILayout.LabelField("Plugin Required Activities", BoldLabel);
		guiActivity.activity = Target.Activity;
		guiActivity.OnGUI();
		EditorGUILayout.Space ();
		EditorGUILayout.LabelField("Required Plugins");
		OnGUI_Dependencies();
		EditorGUILayout.EndVertical();
	}
	void OnGUI_MetaData()
	{
		EditorGUILayout.BeginHorizontal();
		new_metaname = EditorGUILayout.TextField("Meta-data Name", new_metaname);
		if (GUILayout.Button("+", PositiveButton))
		{
			ManifestMetaData data = new ManifestMetaData();
			data.Set(new_metaname, "VALUE GOES HERE", "VALUE GOES HERE");
			Target.MetaData.Add(data);
			new_metaname = "";
		}
		EditorGUILayout.EndHorizontal();
		for (int i = 0; i < Target.MetaData.Count; i++)
		{
			EditorGUILayout.BeginHorizontal();
			if (GUILayout.Button("-", NegetiveButton))
			{
				Target.MetaData.RemoveAt(i);
				i--;
				continue;
			}
			Target.MetaData[i].name = EditorGUILayout.TextField(Target.MetaData[i].name);
			Target.MetaData[i].value = EditorGUILayout.TextField(Target.MetaData[i].value);
			EditorGUILayout.EndHorizontal();
		}
	}
	void OnGUI_Dependencies()
	{
		EditorGUILayout.BeginHorizontal();
		new_depname = EditorGUILayout.TextField("Plugin Name", new_depname);
		if (GUILayout.Button("+", PositiveButton))
		{
			if (!new_depname.EndsWith(".cs")) new_depname += ".cs";
			Target.RequiredAgents.Add(new_depname);
			new_depname = "";
		}
		EditorGUILayout.EndHorizontal();
		for (int i = 0; i < Target.RequiredAgents.Count; i++)
		{
			EditorGUILayout.BeginHorizontal();
			if (GUILayout.Button("-", NegetiveButton))
			{
				Target.RequiredAgents.RemoveAt(i);
				i--;
				continue;
			}
			Target.RequiredAgents[i] = EditorGUILayout.TextField(Target.RequiredAgents[i]);
			EditorGUILayout.EndHorizontal();
		}
	}
}
public class UnityGUI_Versions
{
	public List<AgentSetVersion>	Versions;
	
	GUIStyle	PositiveButton = new GUIStyle("Button");
	GUIStyle	NegetiveButton = new GUIStyle("Button");
	GUIStyle	BoldLabel = new GUIStyle("Label"),
				GreenLabel = new GUIStyle("Label"),
				RedLabel = new GUIStyle("Label"),
				YellowLabel = new GUIStyle("Label");
	
	Vector2		scroll = Vector2.zero;
	string		new_version = "", new_def = "";
//	AgentDependency		dependencies;
	Manifest			manifest;
	public AgentSetVersion EditingVersion = null;
	
	public void SetStyles(GUIStyle pos, GUIStyle neg, GUIStyle label, GUIStyle green, GUIStyle red, GUIStyle yellow)
	{
		PositiveButton = pos;
		NegetiveButton = neg;
		BoldLabel = label;
		GreenLabel = green;
		YellowLabel = yellow;
		RedLabel = red;
	}
	
	public UnityGUI_Versions(List<AgentSetVersion> list, AgentDependency deps, Manifest m)
	{
		Versions = list;
//		dependencies = deps;
		manifest = m;
	}

	public GUIStyle		getVersionStyle(AgentSetVersion ver)
	{
		if (ver.isVersionReady())
		{
			if (ver.isManifestReady(manifest))
				return GreenLabel;
			else 
				return YellowLabel;
		} else return RedLabel;
	}
	
	public void		OnGUI()
	{
		EditorGUILayout.BeginVertical();
		EditorGUILayout.LabelField("Versions", BoldLabel);
		EditorGUILayout.BeginHorizontal();
		new_version = EditorGUILayout.TextField("New Version", new_version);
		if (GUILayout.Button("New", GUILayout.MaxWidth(100)))
		{
			AgentSetVersion newver = new AgentSetVersion();
			newver.name = new_version;
			new_version = "";
			newver.bundleid = PlayerSettings.bundleIdentifier;
			newver.versionName = PlayerSettings.bundleVersion;
			newver.versionCode = PlayerSettings.Android.bundleVersionCode.ToString();
			if (!newver.name.EndsWith(".xml")) newver.name += ".xml";
			Versions.Add(newver);
		}
		EditorGUILayout.EndHorizontal();
		scroll = EditorGUILayout.BeginScrollView(scroll, GUILayout.Height(180));
		for (int i = 0; i < Versions.Count; i++)
		{
			EditorGUILayout.BeginHorizontal("Box");
			EditorGUILayout.LabelField(Versions[i].name + "  Bundle:" + Versions[i].bundleid, getVersionStyle(Versions[i]));
			if (GUILayout.Button("...", PositiveButton))
			{
				EditingVersion = Versions[i];
			}
			EditorGUILayout.EndHorizontal();
		}
		EditorGUILayout.EndScrollView();
		if (EditingVersion != null)
		{
			EditorGUILayout.LabelField("Version Properties", BoldLabel);
			EditingVersion.bundleid = EditorGUILayout.TextField("Package", EditingVersion.bundleid);
			EditingVersion.versionCode = EditorGUILayout.TextField("Version Code", EditingVersion.versionCode);
			EditingVersion.versionName = EditorGUILayout.TextField("Version Name", EditingVersion.versionName);
			EditorGUILayout.LabelField("Pre Definitions", BoldLabel);
			EditorGUILayout.BeginHorizontal("Box");
			new_def = EditorGUILayout.TextField("New Definition", new_def);
			if (GUILayout.Button("+", PositiveButton))
			{
				EditingVersion.PreDefine.Add(new_def);
				new_def = "";
			}
			EditorGUILayout.EndHorizontal();
			for (int i = 0; i < EditingVersion.PreDefine.Count; i++)
			{
				EditorGUILayout.BeginHorizontal();
				if (GUILayout.Button("-", NegetiveButton))
				{
					EditingVersion.PreDefine.RemoveAt(i);
					i--;
					continue;
				}
				EditingVersion.PreDefine[i] = EditorGUILayout.TextField(EditingVersion.PreDefine[i]);
				EditorGUILayout.EndHorizontal();
			}
		}
		EditorGUILayout.EndVertical();
	}
}
public class UnityGUI_AgentVersion
{
	GUIStyle	//PositiveButton = new GUIStyle("Button");
	//GUIStyle	NegetiveButton = new GUIStyle("Button"),
				SubBoldLabel = new GUIStyle("Label"),
				GreenLabel = new GUIStyle("Label"),
				RedLabel = new GUIStyle("Label"),
				YellowLabel = new GUIStyle("Label");
	Manifest	manifest;
	
	public UnityGUI_AgentVersion(Manifest m)
	{
		manifest = m;
	}
	
	public void SetStyles(GUIStyle pos, GUIStyle neg, GUIStyle sublabel, GUIStyle green, GUIStyle red, GUIStyle yellow)
	{
		//PositiveButton = pos;
		//NegetiveButton = neg;
		SubBoldLabel = sublabel;
		GreenLabel = green;
		RedLabel = red;
		YellowLabel = yellow;
	}
	
	public void		OnGUI(AgentVersion version, AgentDependency deps, AgentSetVersion vset)
	{
		GUIStyle status_style = GreenLabel;
		if (version.MetaData.Count > 0)
		{
			EditorGUILayout.LabelField("Meta-Datas", SubBoldLabel);
			for (int i = 0; i < version.MetaData.Count; i++)
			{
				version.MetaData[i].value = EditorGUILayout.TextField(version.MetaData[i].name, version.MetaData[i].value);
				version.MetaData[i].resource = EditorGUILayout.TextField("Resource", version.MetaData[i].resource);
			}
		} else EditorGUILayout.LabelField("No Meta-Data is Required", SubBoldLabel);
		if (version.ManifestSource.Strings.Count > 0)
		{
			EditorGUILayout.LabelField("Strings", SubBoldLabel);
			for (int i = 0; i < version.Strings.Count; i++)
			{
				version.Strings.strings[i].value =
					EditorGUILayout.TextField(version.Strings.strings[i].name,
						version.Strings.strings[i].value);
			}
		} else EditorGUILayout.LabelField("No String Resource is Required", SubBoldLabel);
		if (version.ManifestSource.Permission.Count > 0)
		{
			EditorGUILayout.LabelField("Permissions", SubBoldLabel);
			status_style = GreenLabel;
			for (int i = 0; i < version.ManifestSource.Permission.Count; i++)
			{
				status_style = GreenLabel;
				string perm = version.ManifestSource.Permission[i].name;
				if (!manifest.hasPermission(perm)) status_style = RedLabel;
				EditorGUILayout.LabelField(perm, status_style);
			}
		} else EditorGUILayout.LabelField("No Permission is Required", SubBoldLabel);
		if (version.ManifestSource.Activity.Count > 0)
		{
			EditorGUILayout.LabelField("Activities", SubBoldLabel);
			for (int i = 0; i < version.ManifestSource.Activity.Count; i++)
			{
				ManifestActivity act = version.ManifestSource.Activity[i];
				status_style = GreenLabel;
				if (!manifest.hasActivity(act.name)) status_style = RedLabel;
				EditorGUILayout.LabelField(act.name, status_style);
				for (int j = 0; j < act.meta_data.Count; j++)
				{
					act.meta_data[j].value = EditorGUILayout.TextField(act.meta_data[j].name, act.meta_data[j].value);
					act.meta_data[j].resource = EditorGUILayout.TextField("Resource", act.meta_data[j].resource);
				}
			}
		} else EditorGUILayout.LabelField("No Activity is Required", SubBoldLabel);
		if (version.ManifestSource.RequiredAgents.Count > 0)
		{
			EditorGUILayout.LabelField("Dependencies", SubBoldLabel);
			for (int i = 0; i < version.ManifestSource.RequiredAgents.Count; i++)
			{
				status_style = GreenLabel;
				if (!deps.hasAgent(version.ManifestSource.RequiredAgents[i]))
				{
					status_style = RedLabel;
					EditorGUILayout.LabelField("Warning: No plugin with filename: " + version.ManifestSource.RequiredAgents[i] +
						" found. Maybe your Plugin Manager is out-dated.", YellowLabel);
				} else if (!vset.isPluginActive(version.ManifestSource.RequiredAgents[i]))
					status_style = RedLabel;
				EditorGUILayout.LabelField(version.ManifestSource.RequiredAgents[i], status_style);
			}
		} else EditorGUILayout.LabelField("No Additional Plugins Required");
	}
}
